export interface User {
    id: string;
    email?: string;
    number?: string;
    pushTokens?: PushToken[];
    webPushTokens?: WebPushToken[];
}
export interface SendRequest {
    notificationId: string;
    user: User;
    mergeTags?: Record<string, unknown>;
    replace?: Record<string, string>;
    forceChannels?: Channels[];
    secondaryId?: string;
    schedule?: string;
    templateId?: string;
    subNotificationId?: string;
    options?: {
        email?: {
            replyToAddresses?: string[];
            ccAddresses?: string[];
            bccAddresses?: string[];
            attachments?: {
                filename: string;
                url: string;
            }[];
        };
    };
}
export interface RetractRequest {
    notificationId: string;
    userId: string;
    secondaryId?: string;
    subNotificationId?: string;
}
export interface CreateSubNotificationRequest {
    notificationId: string;
    title: string;
    subNotificationId: string;
}
export interface DeleteSubNotificationRequest {
    notificationId: string;
    subNotificationId: string;
}
export interface SetUserPreferencesRequest {
    notificationId: string;
    channel: Channels;
    state: boolean;
    subNotificationId?: string;
}
export declare enum Channels {
    EMAIL = "EMAIL",
    INAPP_WEB = "INAPP_WEB",
    SMS = "SMS",
    CALL = "CALL",
    PUSH = "PUSH",
    WEB_PUSH = "WEB_PUSH"
}
export interface InitConfiguration {
    baseURL?: string;
}
export interface PushToken {
    type: PushProviders;
    token: string;
    device: Device;
}
export declare enum PushProviders {
    FCM = "FCM",
    APN = "APN"
}
export interface Device {
    app_id?: string;
    ad_id?: string;
    device_id: string;
    platform?: string;
    manufacturer?: string;
    model?: string;
}
export interface PushSubscription {
    endpoint: string;
    keys: {
        p256dh: string;
        auth: string;
    };
}
export interface WebPushToken {
    sub: PushSubscription;
}
