/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Brands {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: number | undefined;
    }
}
export declare class Brands {
    protected readonly _options: Brands.Options;
    constructor(_options?: Brands.Options);
    /**
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.PaymentRequiredError}
     * @throws {@link Courier.AlreadyExistsError}
     */
    create(request: Courier.BrandParameters, requestOptions?: Brands.IdempotentRequestOptions): Promise<Courier.Brand>;
    /**
     * Fetch a specific brand by brand ID.
     */
    get(brandId: string, requestOptions?: Brands.RequestOptions): Promise<Courier.Brand>;
    /**
     * Get the list of brands.
     */
    list(request?: Courier.ListBrandsRequest, requestOptions?: Brands.RequestOptions): Promise<Courier.BrandsResponse>;
    /**
     * Delete a brand by brand ID.
     * @throws {@link Courier.ConflictError}
     */
    delete(brandId: string, requestOptions?: Brands.RequestOptions): Promise<void>;
    /**
     * Replace an existing brand with the supplied values.
     */
    replace(brandId: string, request: Courier.BrandUpdateParameters, requestOptions?: Brands.RequestOptions): Promise<Courier.Brand>;
    protected _getAuthorizationHeader(): Promise<string>;
}
