/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Courier from "../../../../..";
export declare namespace Tokens {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Tokens {
    protected readonly _options: Tokens.Options;
    constructor(_options?: Tokens.Options);
    /**
     * Adds multiple tokens to a user and overwrites matching existing tokens.
     * @throws {@link Courier.BadRequestError}
     */
    addMultiple(userId: string, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Adds a single token to a user and overwrites a matching existing token.
     * @throws {@link Courier.BadRequestError}
     */
    add(userId: string, token: string, request: Courier.users.UserToken, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Apply a JSON Patch (RFC 6902) to the specified token.
     * @throws {@link Courier.BadRequestError}
     */
    update(userId: string, token: string, request: Courier.users.PatchUserTokenOpts, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Get single token available for a `:token`
     * @throws {@link Courier.BadRequestError}
     */
    get(userId: string, token: string, requestOptions?: Tokens.RequestOptions): Promise<Courier.users.GetUserTokenResponse>;
    /**
     * Gets all tokens available for a :user_id
     * @throws {@link Courier.BadRequestError}
     */
    list(userId: string, requestOptions?: Tokens.RequestOptions): Promise<Courier.users.GetAllTokensResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
