/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Tenants {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Tenants {
    protected readonly _options: Tenants.Options;
    constructor(_options?: Tenants.Options);
    /**
     * @throws {@link Courier.BadRequestError}
     */
    createOrReplace(tenantId: string, request: Courier.TenantCreateOrReplaceParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.Tenant>;
    /**
     * @throws {@link Courier.BadRequestError}
     */
    get(tenantId: string, requestOptions?: Tenants.RequestOptions): Promise<Courier.Tenant>;
    list(request?: Courier.ListTenantParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.TenantListResponse>;
    delete(tenantId: string, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * @throws {@link Courier.BadRequestError}
     */
    getUsersByTenant(tenantId: string, request?: Courier.ListUsersForTenantParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.ListUsersForTenantResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
