/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Lists {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: number | undefined;
    }
}
export declare class Lists {
    protected readonly _options: Lists.Options;
    constructor(_options?: Lists.Options);
    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     * @throws {@link Courier.BadRequestError}
     */
    list(request?: Courier.GetAllListsRequest, requestOptions?: Lists.RequestOptions): Promise<Courier.ListGetAllResponse>;
    /**
     * Returns a list based on the list ID provided.
     * @throws {@link Courier.NotFoundError}
     */
    get(listId: string, requestOptions?: Lists.RequestOptions): Promise<Courier.List>;
    /**
     * Create or replace an existing list with the supplied values.
     */
    update(listId: string, request: Courier.ListPutParams, requestOptions?: Lists.RequestOptions): Promise<Courier.List>;
    /**
     * Delete a list by list ID.
     */
    delete(listId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Restore a previously deleted list.
     */
    restore(listId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Get the list's subscriptions.
     * @throws {@link Courier.NotFoundError}
     */
    getSubscribers(listId: string, request?: Courier.GetSubscriptionForListRequest, requestOptions?: Lists.RequestOptions): Promise<Courier.ListGetSubscriptionsResponse>;
    /**
     * Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
     * @throws {@link Courier.BadRequestError}
     */
    updateSubscribers(listId: string, request: Courier.PutSubscriptionsRecipient[], requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
     * @throws {@link Courier.BadRequestError}
     */
    addSubscribers(listId: string, request: Courier.PutSubscriptionsRecipient[], requestOptions?: Lists.IdempotentRequestOptions): Promise<void>;
    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     */
    subscribe(listId: string, userId: string, request?: Courier.SubscribeUserToListRequest, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Delete a subscription to a list by list ID and user ID.
     * @throws {@link Courier.NotFoundError}
     */
    unsubscribe(listId: string, userId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
