/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: number | undefined;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Fetch the statuses of messages you've previously sent.
     */
    list(request?: Courier.ListMessagesRequest, requestOptions?: Messages.RequestOptions): Promise<Courier.ListMessagesResponse>;
    /**
     * Fetch the status of a message you've previously sent.
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     */
    get(messageId: string, requestOptions?: Messages.RequestOptions): Promise<Courier.MessageDetails>;
    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     */
    cancel(messageId: string, requestOptions?: Messages.IdempotentRequestOptions): Promise<Courier.MessageDetails>;
    /**
     * Fetch the array of events of a message you've previously sent.
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     */
    getHistory(messageId: string, request?: Courier.GetMessageHistoryRequest, requestOptions?: Messages.RequestOptions): Promise<Courier.MessageHistoryResponse>;
    /**
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     */
    getContent(messageId: string, requestOptions?: Messages.RequestOptions): Promise<Courier.RenderOutputResponse>;
    archive(requestId: string, requestOptions?: Messages.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
