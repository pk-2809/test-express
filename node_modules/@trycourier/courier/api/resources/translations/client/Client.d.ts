/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
export declare namespace Translations {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Translations {
    protected readonly _options: Translations.Options;
    constructor(_options?: Translations.Options);
    /**
     * Get translations by locale
     * @throws {@link Courier.NotFoundError}
     */
    get(domain: string, locale: string, requestOptions?: Translations.RequestOptions): Promise<string>;
    /**
     * Update a translation
     * @throws {@link Courier.NotFoundError}
     */
    update(domain: string, locale: string, request: string, requestOptions?: Translations.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
