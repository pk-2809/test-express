/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Profiles {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: number | undefined;
    }
}
export declare class Profiles {
    protected readonly _options: Profiles.Options;
    constructor(_options?: Profiles.Options);
    /**
     * Returns the specified user profile.
     * @throws {@link Courier.BadRequestError}
     */
    get(userId: string, requestOptions?: Profiles.RequestOptions): Promise<Courier.ProfileGetResponse>;
    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     * @throws {@link Courier.BadRequestError}
     */
    create(userId: string, request: Courier.MergeProfileRequest, requestOptions?: Profiles.IdempotentRequestOptions): Promise<Courier.MergeProfileResponse>;
    /**
     * When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
     * removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
     * use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.
     * @throws {@link Courier.BadRequestError}
     */
    replace(userId: string, request: Courier.ReplaceProfileRequest, requestOptions?: Profiles.RequestOptions): Promise<Courier.ReplaceProfileResponse>;
    /**
     * Deletes the specified user profile.
     * @throws {@link Courier.BadRequestError}
     */
    delete(userId: string, requestOptions?: Profiles.RequestOptions): Promise<void>;
    /**
     * Returns the subscribed lists for a specified user.
     * @throws {@link Courier.BadRequestError}
     */
    getListSubscriptions(userId: string, request?: Courier.GetListSubscriptionsRequest, requestOptions?: Profiles.RequestOptions): Promise<Courier.GetListSubscriptionsResponse>;
    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     * @throws {@link Courier.BadRequestError}
     */
    subscribeToLists(userId: string, request: Courier.SubscribeToListsRequest, requestOptions?: Profiles.IdempotentRequestOptions): Promise<Courier.SubscribeToListsResponse>;
    /**
     * Removes all list subscriptions for given user.
     * @throws {@link Courier.BadRequestError}
     */
    deleteListSubscription(userId: string, requestOptions?: Profiles.RequestOptions): Promise<Courier.DeleteListSubscriptionResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
