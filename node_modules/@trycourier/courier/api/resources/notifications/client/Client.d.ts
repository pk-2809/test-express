/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../..";
export declare namespace Notifications {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Notifications {
    protected readonly _options: Notifications.Options;
    constructor(_options?: Notifications.Options);
    list(request?: Courier.NotificationListParams, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationListResponse>;
    getContent(id: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationGetContentResponse>;
    getDraftContent(id: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationGetContentResponse>;
    updateVariations(id: string, request?: Courier.NotificationUpdateVariationsParams, requestOptions?: Notifications.RequestOptions): Promise<void>;
    updateDraftVariations(id: string, request?: Courier.NotificationDraftUpdateVariationsParams, requestOptions?: Notifications.RequestOptions): Promise<void>;
    getSubmissionChecks(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.SubmissionChecksGetResponse>;
    replaceSubmissionChecks(id: string, submissionId: string, request: Courier.SubmissionChecksReplaceParams, requestOptions?: Notifications.RequestOptions): Promise<Courier.SubmissionChecksReplaceResponse>;
    cancelSubmission(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
